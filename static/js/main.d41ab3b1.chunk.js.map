{"version":3,"sources":["components/common/Navlink.js","components/Header.js","helpers/helpers.js","components/sip-calculator/Breakup.js","components/sip-calculator/InvestedVsGainChart.js","components/sip-calculator/DataOverview.js","hooks/useFinInput.js","components/common/Input.js","components/sip-calculator/SipCalculator.js","components/multi-line-to-single-line/MultiLineToSingleLine.js","components/salary-hike-percentage-calculator/SalaryHikePerCalculator.js","components/password-generator/PasswordGenerator.js","App.js","reportWebVitals.js","index.js"],"names":["Navlink","props","text","url","to","activeClassName","className","Header","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","target","href","numberFormat","value","Math","round","displayType","thousandsGroupStyle","thousandSeparator","prefix","toSingleLine","multiLineString","noSpaces","delimiter","replace","alpha","numbers","symbols","generatePassword","length","chars","password","i","charAt","floor","random","Breakup","data","useState","showTable","setShowTable","onClick","state","map","rec","year","month","initialBalance","investment","interest","balanceAtEndOfMonth","InvestedVsGainChart","meta","investmentAmount","interestAmount","width","height","chartType","loader","options","title","is3D","titleTextStyle","fontSize","rootProps","DataOverview","finalBalance","useFinInput","initialValues","values","setValues","e","name","parseFloat","Input","max","autoComplete","finance","Finance","SipCalculator","useEffect","document","sipAmount","rateOfReturn","period","handleChange","setMeta","setData","style","margin","paddingTop","onChange","placeholder","preventDefault","transactions","mon","parseInt","totalAmountThisMonth","thisMonthInterest","CI","push","totalInterest","invested","calculate","MultiLineToSingleLine","setText","for","rows","SalaryHikePerCalculator","currentSalary","perIncrement","newSalary","setNewSalary","toFixed","PasswordGenerator","len","setLen","setPassword","createPassword","class","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d41ab3b1.chunk.js","sourcesContent":["import {NavLink} from 'react-router-dom';\n\nexport default function Navlink(props) {\n    const {text, url} = props;\n    return (\n        <NavLink to={url} activeClassName=\"active\" className=\"nav-link\">{text}</NavLink>\n    )\n}\n","import React from 'react'\nimport {Link} from 'react-router-dom'\nimport Navlink from '../components/common/Navlink'\n\nexport default function Header() {\n    return (\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n            <div className=\"container\">\n                <Link className=\"navbar-brand\" to=\"/\">Tools</Link>\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n                    <ul className=\"navbar-nav\">\n                        <Navlink url=\"/sip-calculator\" text=\"SIP Calculator\"/>\n                        <Navlink url=\"/multi-line-to-single-line\" text=\"Multi Line To Single Line\"/>\n                        <Navlink url=\"/salary-hike-calculator\" text=\"Salary Hike Calculator\" />\n                        <Navlink url=\"/password-generator\" text=\"Password Generator\" />\n                    </ul>\n                    <ul className=\"navbar-nav ml-auto\" >\n                        <li className=\"nav-item dropdown\">\n                            <a className=\"nav-link\" target=\"_new\" href=\"https://github.com/71anshuman\">Dev</a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n    )\n}\n","import NumberFormat from 'react-number-format';\n\nexport const numberFormat = (value) => {\n    return <NumberFormat value={Math.round(value, 2)} displayType={'text'} thousandsGroupStyle=\"lakh\" thousandSeparator={true} prefix=\"&#8377;\" />\n};\n\nexport const toSingleLine = (multiLineString, noSpaces) => {\n    var delimiter = noSpaces ? '' : ' ';\n    return  multiLineString.replace(/\\s\\s+/g, delimiter).replace(/(?:\\r\\n|\\r|\\n)/g, \" \");\n};\n\nconst alpha = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\nconst numbers = '0123456789'\nconst symbols = '!@#$%^&*_-+='\n\nexport const createPassword = (length = 8, hasNumbers = true, hasSymbols = true) => {\n  let chars = alpha\n  chars += hasNumbers ? numbers : ''\n  chars += hasSymbols ? symbols : ''\n  return generatePassword(length, chars)\n}\n\nconst generatePassword = (length, chars) => {\n  let password = ''\n  for (let i = 0; i < length; i++) {\n    password += chars.charAt(Math.floor(Math.random() * chars.length))\n  }\n  return password\n}\n","import React, { useState } from 'react'\nimport { numberFormat } from '../../helpers/helpers'\n\nexport default function Breakup(props) {\n    const { data } = props;\n    const [showTable, setShowTable] = useState(false);\n    return (\n        <div className=\"row\">\n            <div className=\"col-md-12\">\n                {data.length > 0 &&\n                    <button className=\"btn btn-light text-uppercase\" onClick={(() => setShowTable(state => !state))}> { showTable ? 'hide table' : 'Show Detail' }</button>\n                }\n                {showTable &&\n                    <table className=\"table table-striped table-hover table-sm scroll\">\n                        <caption className=\"text-uppercase text-muted text-center\">Investment and Wealth gain Breakup</caption>\n                        <thead>\n                        <tr>\n                            <th>Year</th>\n                            <th>Month</th>\n                            <th>Balance@Bigin</th>\n                            <th>Investment</th>\n                            <th>Interest</th>\n                            <th>Balance@End</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {\n                            data.map((rec, i) => {\n                            const {year, month, initialBalance, investment, interest, balanceAtEndOfMonth} = rec;\n                            return <tr key={i}>\n                                <td>{ year }</td>\n                                <td>{ month }</td>\n                                <td>{ numberFormat(initialBalance) }</td>\n                                <td>{ numberFormat(investment) }</td>\n                                <td>{ numberFormat(interest) }</td>\n                                <td>\n                                { numberFormat(balanceAtEndOfMonth) }\n                                </td>\n                            </tr>\n                            })\n                        }\n                        </tbody>\n                    </table>\n                }\n            </div>\n        </div>\n    )\n}\n","import { Chart } from \"react-google-charts\";\n\nexport default function InvestedVsGainChart(props) {\n    const { meta } = props;\n    const { investmentAmount, interestAmount } = meta;\n    return (\n        <div>\n            {investmentAmount !== 0 &&\n                <Chart\n                    width={'100%'}\n                    height={'400px'}\n                    chartType=\"PieChart\"\n                    loader={<div>Loading Chart</div>}\n                    data={[\n                        ['Amount', 'INR'],\n                        ['Invested', investmentAmount],\n                        ['Gain', interestAmount],\n                    ]}\n                    options={\n                        {\n                            title: 'Gain VS Invested',\n                            is3D: true,\n                            titleTextStyle: {\n                                fontSize: '24px',\n                            }\n                        }\n                    }\n                    rootProps={{ 'data-testid': '2' }}\n                />\n            }\n        </div>\n    )\n}\n","import React from 'react'\nimport { numberFormat } from '../../helpers/helpers'\n\nexport default function DataOverview({meta}) {\n    const { investmentAmount, interestAmount, finalBalance } = meta;\n    return (\n        <div className=\"col-md-12\">\n            <div className=\"jumbotron jumbotron-fluid bg-white border-bottom border-grey\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-4\">\n                            <h4><i className=\"fa fa-bars\"></i>\n                                { numberFormat(investmentAmount) }<br/>\n                                <small className=\"text-muted\">INVESTED</small>\n                            </h4>\n                        </div>\n                        <div className=\"col-md-4\">\n                            <h4>\n                                { numberFormat(interestAmount) }<br/>\n                                <small className=\"text-muted\">GAIN</small>\n                            </h4>\n                        </div>\n                        <div className=\"col-md-4\">\n                        <h4>\n                            { numberFormat(finalBalance) }<br/>\n                            <small className=\"text-muted text-uppercase\">maturity value</small>\n                        </h4>\n                    </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n","import { useState } from 'react';\n\nexport const useFinInput = (initialValues) => {\n    const [values, setValues] = useState(initialValues);\n\n    return [values, e => {\n        const {name, value} = e.target;\n        setValues({\n            ...values,\n            [name]: parseFloat(value)\n        })\n    }]\n}","export default function Input(props) {\n    const { name } = props;\n    return (\n        <input max=\"100\" autoComplete=\"off\" name={name} className=\"form-control\" type=\"number\" {...props}/>\n    )\n}\n","import React, {useState, useEffect} from 'react'\n\nimport { Finance } from 'financejs';\nimport Breakup from './Breakup';\nimport InvestedVsGainChart from './InvestedVsGainChart';\nimport DataOverview from './DataOverview';\nimport { useFinInput } from '../../hooks/useFinInput';\nimport Input from '../common/Input';\n\nlet finance = new Finance();\n\nexport default function SipCalculator() {\n    useEffect(() => {\n        document.title = \"SIP Calculator\"\n    }, []);\n\n    const [{sipAmount, period, rateOfReturn}, handleChange] = useFinInput(\n        {\n          sipAmount: '',\n          rateOfReturn: '',\n          period: '',\n        }\n    );\n    \n    const [meta, setMeta] = useState({investmentAmount: 0, interestAmount: 0, finalBalance: 0});\n    const [data, setData] = useState([]);\n    \n    function calculate() {\n        let investmentAmount = 0;\n        let interest = 0;\n        let balanceAtEndOfMonth = 0;\n        let transactions = [];\n        let year = 1;\n        let month;\n        for (let i = 1; i <= period * 12; i++) {\n          let mon = parseInt(i % 12);\n          month = mon === 0 ? 12 : mon;\n          const totalAmountThisMonth = investmentAmount + sipAmount;\n          balanceAtEndOfMonth = totalAmountThisMonth * (1 + (rateOfReturn/100) / 12);\n          const thisMonthInterest = Math.round(finance.CI(rateOfReturn/12, 1, totalAmountThisMonth, 1) - totalAmountThisMonth);\n          interest += thisMonthInterest;\n    \n          transactions.push({\n            year: year,\n            month: month,\n            initialBalance: Math.round(investmentAmount),\n            investment: sipAmount,\n            interest: thisMonthInterest,\n            balanceAtEndOfMonth: Math.round(balanceAtEndOfMonth),\n            totalInterest: interest\n          });\n    \n          investmentAmount = balanceAtEndOfMonth;\n          if (mon === 0) {\n            year++;\n          }\n        }\n    \n        setData(transactions);\n        const invested = period * 12 * sipAmount;\n        setMeta({\n          investmentAmount: invested ?? 0,\n          period,\n          rateOfReturn,\n          finalBalance: investmentAmount,\n          interestAmount: parseInt(investmentAmount - invested),\n        });\n    \n    }\n\n    return (\n        <>\n        <div className=\"jumbotron jumbotron-fluid\">\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-md-8\">\n                        <h1 className=\"display-6\">SIP Calculator</h1>\n                        <p className=\"lead\">SIP is the best way to accumulate long term wealth.</p>\n                        <div className=\"row\">\n                            <DataOverview meta={meta} />\n                        </div>\n                    </div>\n                    <div className=\"col-md-4\" style={{margin: 'auto 0', paddingTop: '5rem'}}>\n                        <form>\n                            <div className=\"form-group\">\n                                <div className=\"input-group\">\n                                    <div className=\"input-group-prepend\">\n                                        <span className=\"input-group-text\">&#8377;</span>\n                                    </div>\n                                    <Input name='sipAmount' value={sipAmount} onChange={handleChange} placeholder=\"How much would invest monthly?\" />\n                                </div>\n                            </div>\n                            <div className=\"form-group\">\n                                <div className=\"input-group mb-3\">\n                                    <Input name='period' value={period} onChange={handleChange} placeholder=\"Investment Period\" />\n                                    <div className=\"input-group-append\">\n                                        <span className=\"input-group-text\">Years</span>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"form-group\">\n                                <div className=\"input-group mb-3\">\n                                    <Input name='rateOfReturn' value={rateOfReturn} onChange={handleChange} placeholder=\"Expected Annual Returns (%)\" />\n                                    <div className=\"input-group-append\">\n                                        <span className=\"input-group-text\">%</span>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"form-group\">\n                                <button className=\"btn btn-block btn-light btn-outline\" onClick={(e) =>{e.preventDefault(); calculate()}}>Calculate</button>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div className=\"row\">\n            <div className=\"col-md-4\">\n                <InvestedVsGainChart  meta={meta}/>\n            </div>\n            <div className=\"col-md-8\">\n                { data && <Breakup data={data} /> }\n            </div>\n        </div>\n        </>\n    )\n}\n","import React, {useState, useEffect} from 'react'\nimport {toSingleLine} from '../../helpers/helpers';\n\nexport default function MultiLineToSingleLine() {\n    useEffect(() => {\n        document.title = \"Multi Line To Single Line text converter\"\n    }, []);\n\n    const [text, setText] = useState(\"\");\n\n    return (\n        <>\n            <div className=\"jumbotron jumbotron-fluid\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8\">\n                            <h1 className=\"display-6\">Multi Line To Single Line text conveter</h1>\n                            <p className=\"lead\">You can convert multiner text to single line.</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-md-6\">\n                    <form>\n                        <div className=\"form-group\">\n                            <label for=\"multiLineText\">Type/Paste multiliner text</label>\n                            <textarea rows=\"16\" className=\"form-control\" aria-label=\"With textarea\" name=\"multiLineText\" onChange={e => setText(e.target.value)}></textarea>\n                        </div>\n                    </form>\n                </div>\n                <div className=\"col-md-6\">\n                    <div className=\"form-group\">\n                        <label className=\"\">Converted text</label>\n                        <textarea rows=\"16\" className=\"form-control\" value={toSingleLine(text, true)}></textarea>\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n}\n","import {useState, useEffect} from 'react'\nimport Input from '../common/Input'\nimport { useFinInput } from '../../hooks/useFinInput';\nimport { numberFormat } from '../../helpers/helpers';\n\nexport default function SalaryHikePerCalculator() {\n    useEffect(() => {\n        document.title = \"Salary Hike Percentage Calculator\"\n    }, []);\n    let percentage;\n    const [{currentSalary, perIncrement}, handleChange] = useFinInput(\n        {\n          currentSalary: 0,\n          perIncrement: 0,\n        }\n    );\n\n    const [newSalary, setNewSalary] = useState(0);\n\n    function calculate () {\n        setNewSalary((currentSalary * perIncrement / 100 ) + currentSalary);\n    }\n\n    function calculatePercentage () {\n        const salaryHiked = (newSalary - currentSalary);\n        percentage = (salaryHiked / currentSalary) * 100;\n        handleChange({target:{name: 'perIncrement', value: percentage}});\n    }\n\n    return (\n        <>\n            <div className=\"jumbotron jumbotron-fluid\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8\">\n                            <h1 className=\"display-6\">Salary Hike Calculator</h1>\n                            <hr />\n                            <div className=\"row\">\n                                <div className=\"col-12\">\n                                    {newSalary > 0 &&\n                                        <h2>\n                                            <small>\n                                                <em>Your new Salary is:</em>\n                                            </small>\n                                            <span className=\"text-muted\">{numberFormat(newSalary)}</span>\n                                        </h2>\n                                    }\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"col-md-4 bg-white\" style={{margin: 'auto 0', paddingTop: '1rem'}}>\n                            <form>\n                                <div className=\"form-group\">\n                                    <label>Current Salary</label>\n                                    <div className=\"input-group\">\n                                        <div className=\"input-group-prepend\">\n                                            <span className=\"input-group-text\">&#8377;</span>\n                                        </div>\n                                        <Input name='currentSalary' value={currentSalary} onChange={handleChange} placeholder=\"Current Salary\" />\n                                    </div>\n                                </div>\n                                <div className=\"form-group\">\n                                    <label>Hike Percentage</label>\n                                    <div className=\"input-group mb-3\">\n                                        <Input name='perIncrement' value={perIncrement.toFixed(2)} onChange={handleChange} placeholder=\"Percentage incremented\" />\n                                        <div className=\"input-group-append\">\n                                            <span className=\"input-group-text\">%</span>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div className=\"form-group\">\n                                    <button className=\"btn btn-block btn-dark btn-outline\" onClick={(e) =>{e.preventDefault(); calculate()}}>Calculate</button>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"jumbotron jumbotron-fluid\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8\">\n                            <h1 className=\"display-6\">Salary Percentage Hike Calculator</h1>\n                            <hr />\n                            <div className=\"row\">\n                                <div className=\"col-12\">\n                                    {perIncrement > 0 &&\n                                        <h2>\n                                            <small>\n                                                <em>Your salary hike percentage is:</em>\n                                            </small>\n                                            <span className=\"text-muted\">{perIncrement.toFixed(2)}%</span>\n                                        </h2>\n                                    }\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"col-md-4 bg-white\" style={{margin: 'auto 0', paddingTop: '1rem'}}>\n                            <form>\n                                <div className=\"form-group\">\n                                    <label>Current Salary</label>\n                                    <div className=\"input-group\">\n                                        <div className=\"input-group-prepend\">\n                                            <span className=\"input-group-text\">&#8377;</span>\n                                        </div>\n                                        <Input name='currentSalary' value={currentSalary} onChange={handleChange} placeholder=\"Current Salary\" />\n                                    </div>\n                                </div>\n                                <div className=\"form-group\">\n                                    <label>New Salary</label>\n                                    <div className=\"input-group mb-3\">\n                                        <div className=\"input-group-prepend\">\n                                            <span className=\"input-group-text\">&#8377;</span>\n                                        </div>\n                                        <Input name='newSalary' value={newSalary} onChange={e => setNewSalary(e.target.value)} placeholder=\"New salary\" />\n                                    </div>\n                                </div>\n                                <div className=\"form-group\">\n                                    <button className=\"btn btn-block btn-dark btn-outline\" onClick={(e) =>{e.preventDefault(); calculatePercentage()}}>Calculate</button>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n}\n","import {useState} from 'react'\nimport Input from '../common/Input';\nimport { createPassword } from '../../helpers/helpers';\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\n\nexport default function PasswordGenerator() {\n    const [len, setLen] = useState(8);\n    const [password, setPassword] = useState('');\n\n    function generatePassword() {\n        setPassword(createPassword(len));\n    }\n\n    return (\n            <div className=\"jumbotron jumbotron-fluid\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8\">\n                            <h1 className=\"display-6\">Password Generator</h1>\n                            <hr />\n                            <div className=\"row\">\n                                <div className=\"col-12\">\n                                    <div className=\"form-group\">\n                                        <label>Generated Password</label>\n                                        <div class=\"input-group\">\n                                            <input type=\"text\" className=\"form-control disabled\" value={password} placeholder=\"Generated Password\" />\n                                            <div class=\"input-group-append\">\n                                                <CopyToClipboard text={password}>\n                                                    <button className=\"btn btn-dark\">Copy to clipboard</button>\n                                                </CopyToClipboard>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"col-md-4 bg-white\" style={{margin: 'auto 0', paddingTop: '1rem'}}>\n                            <form>\n                                <div className=\"form-group\">\n                                    <label>Password Length</label>\n                                    <div className=\"input-group\">\n                                        <Input name='currentSalary' value={len} onChange={e => setLen(e.target.value)} placeholder=\"Password Length\" />\n                                    </div>\n                                </div>\n                                <div className=\"form-group\">\n                                    <button className=\"btn btn-block btn-dark btn-outline\" onClick={(e) =>{e.preventDefault(); generatePassword()}}>Generate Password</button>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n    )\n}\n","import Header from './components/Header';\nimport {Switch, Route} from 'react-router-dom';\nimport SipCalculator from './components/sip-calculator'\nimport MultiLineToSingleLine from './components/multi-line-to-single-line';\nimport SalaryHikePerCalculator from './components/salary-hike-percentage-calculator';\nimport PasswordGenerator from './components/password-generator';\n\nfunction App() {\n  return (\n    <>\n    <Header />\n    <div className=\"container-fluid\">\n    <Switch>\n      <Route exact path=\"/\">\n        <SipCalculator />\n      </Route>\n      <Route path=\"/sip-calculator\">\n        <SipCalculator />\n      </Route>\n      <Route path=\"/multi-line-to-single-line\">\n        <MultiLineToSingleLine />\n      </Route>\n      <Route path=\"/salary-hike-calculator\">\n        <SalaryHikePerCalculator />\n      </Route>\n      <Route path=\"/password-generator\">\n        <PasswordGenerator />\n      </Route>\n    </Switch>\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {HashRouter} from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}