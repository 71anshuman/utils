{"version":3,"sources":["components/Header.js","helpers/helpers.js","components/Breakup.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","numberFormat","value","Math","round","displayType","thousandsGroupStyle","thousandSeparator","prefix","Breakup","props","data","meta","investmentAmount","interestAmount","finalBalance","map","rec","i","year","month","initialBalance","investment","interest","balanceAtEndOfMonth","finance","Finance","App","useState","sipAmount","setSipAmount","period","setPeriod","rateOfReturn","setRateOfReturn","setMeta","setData","calculate","transactions","totalAmountThisMonth","thisMonthInterest","CI","push","parseInt","totalInterest","invested","onChange","e","target","placeholder","aria-describedby","onClick","preventDefault","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.abb45251.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Header() {\n    return (\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n            <div className=\"container\">\n                <a className=\"navbar-brand\" href=\"/\">71Anshuman</a>\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n                    <ul className=\"navbar-nav\">\n                        <li className=\"nav-item active\">\n                            <a className=\"nav-link\" href=\"/\">Home <span className=\"sr-only\">(current)</span></a>\n                        </li>\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link\" href=\"http://71anshuman.com\">Dev</a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n    )\n}\n","import NumberFormat from 'react-number-format';\n\nexport const numberFormat = (value) => {\n    return <NumberFormat value={Math.round(value, 2)} displayType={'text'} thousandsGroupStyle=\"lakh\" thousandSeparator={true} prefix=\"&#8377;\" />\n};\n","import React from 'react'\nimport { numberFormat } from '../helpers/helpers';\n\nexport default function Breakup(props) {\n    const { data, meta } = props;\n    const { investmentAmount, interestAmount, finalBalance } = meta;\n    return (\n        <div className=\"row\">\n            <div className=\"col-md-12\">\n            <div className=\"jumbotron jumbotron-fluid bg-light border-bottom border-grey\">\n                <div className=\"container row\">\n                    <div className=\"col-md-4\">\n                        <h4 className=\"display-6\">\n                            { numberFormat(investmentAmount) }<br/>\n                            <small className=\"text-muted\">INVESTED</small>\n                        </h4>\n                    </div>\n                    <div className=\"col-md-4\">\n                        <h4 className=\"display-6\">\n                            { numberFormat(interestAmount) }<br/>\n                            <small className=\"text-muted\">GAIN</small>\n                        </h4>\n                    </div>\n                    <div className=\"col-md-4\">\n                        <h4 className=\"display-6\">\n                            { numberFormat(finalBalance) }<br/>\n                            <small className=\"text-muted text-uppercase\">maturity value</small>\n                        </h4>\n                    </div>\n                </div>\n            </div>\n            </div>\n            <div className=\"col-md-12\">\n                <table className=\"table table-striped table-hover table-sm scroll\">\n                <caption className=\"text-uppercase text-muted text-center\">Investment and Wealth gain Breakup</caption>\n                <thead>\n                <tr>\n                    <th>Year</th>\n                    <th>Month</th>\n                    <th>Balance@Bigin</th>\n                    <th>Investment</th>\n                    <th>Interest</th>\n                    <th>Balance@End</th>\n                </tr>\n                </thead>\n                <tbody>\n                {\n                    data.map((rec, i) => {\n                    const {year, month, initialBalance, investment, interest, balanceAtEndOfMonth} = rec;\n                    return <tr key={i}>\n                        <td>{ year }</td>\n                        <td>{ month }</td>\n                        <td>{ numberFormat(initialBalance) }</td>\n                        <td>{ numberFormat(investment) }</td>\n                        <td>{ numberFormat(interest) }</td>\n                        <td>\n                        { numberFormat(balanceAtEndOfMonth) }\n                        </td>\n                    </tr>\n                    })\n                }\n                </tbody>\n            </table>\n            </div>\n        </div>\n    )\n}\n","import { useState } from 'react';\nimport { Finance } from 'financejs';\n\nimport Header from './components/Header';\nimport Breakup from './components/Breakup';\n\nlet finance = new Finance();\n\nfunction App() {\n  const [sipAmount, setSipAmount] = useState();\n  const [period, setPeriod] = useState();\n  const [rateOfReturn, setRateOfReturn] = useState();\n  const [meta, setMeta] = useState({});\n  const [data, setData] = useState([]);\n\n  function calculate() {\n    let investmentAmount = 0;\n    let interest = 0;\n    let balanceAtEndOfMonth = 0;\n    let transactions = [];\n\n    for (var i = 1 ; i <= period * 12; i++) {\n      const totalAmountThisMonth = investmentAmount + sipAmount;\n      balanceAtEndOfMonth = totalAmountThisMonth * (1 + (rateOfReturn/100) / 12);\n      const thisMonthInterest = Math.round(finance.CI(rateOfReturn/12, 1, totalAmountThisMonth, 1) - totalAmountThisMonth);\n      interest += thisMonthInterest;\n\n      transactions.push({\n        year: parseInt(i / 12) === 1 ? 1 : parseInt(i / 12),\n        month: parseInt(i % 12) === 0 ? 12 : parseInt(i % 12),\n        initialBalance: Math.round(investmentAmount),\n        investment: sipAmount,\n        interest: thisMonthInterest,\n        balanceAtEndOfMonth: Math.round(balanceAtEndOfMonth),\n        totalInterest: interest\n      });\n      investmentAmount = balanceAtEndOfMonth;\n    }\n    setData(transactions);\n    const invested = period * 12 * sipAmount;\n    setMeta({\n      investmentAmount: invested ?? 0,\n      period,\n      rateOfReturn,\n      finalBalance: investmentAmount,\n      interestAmount: parseInt(investmentAmount - invested),\n    });\n\n  }\n\n  return (\n    <>\n    <Header />\n    <div className=\"container\">\n      <div className=\"jumbotron jumbotron-fluid\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-md-8\">\n              <h1 className=\"display-4\">SIP Calculator</h1>\n              <p className=\"lead\">SIP is the best way to accumulate long term wealth.</p>\n            </div>\n            <div className=\"col-md-4\">\n              <form>\n                <div className=\"form-group\">\n                  {/* <label>How much do you want to invest monthly?</label> */}\n                  <input type=\"number\" value={sipAmount} onChange={e => setSipAmount(parseInt(e.target.value))} className=\"form-control\" placeholder=\"How much do you want to invest monthly?\" />\n                </div>\n                <div className=\"form-group\">\n                  {/* <label>Investment Period</label> */}\n                  <div className=\"input-group mb-3\">\n                    <input type=\"number\" className=\"form-control\" value={period} onChange={e => setPeriod(e.target.value)} placeholder=\"Investment Period\" aria-label=\"Recipient's username\" aria-describedby=\"basic-addon2\" />\n                    <div className=\"input-group-append\">\n                      <span className=\"input-group-text\" id=\"basic-addon2\">Years</span>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"form-group\">\n                  {/* <label>Expected Annual Returns (%)</label> */}\n                  <div className=\"input-group mb-3\">\n                    <input type=\"number\" value={rateOfReturn} onChange={e => setRateOfReturn(e.target.value)} className=\"form-control\" placeholder=\"Expected Annual Returns (%)\" aria-label=\"Recipient's username\" aria-describedby=\"basic-addon2\" />\n                    <div className=\"input-group-append\">\n                      <span className=\"input-group-text\" id=\"basic-addon2\">%</span>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"form-group\">\n                  <button className=\"btn btn-block btn-light btn-outline\" onClick={(e) =>{e.preventDefault(); calculate()}}>Calculate</button>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-md-4\">\n          <form>\n            <div className=\"form-group\">\n              <label>How much do you want to invest monthly?</label>\n              <input type=\"number\" value={sipAmount} onChange={e => setSipAmount(parseInt(e.target.value))} className=\"form-control\" placeholder=\"How much do you want to invest monthly?\" />\n            </div>\n            <div className=\"form-group\">\n              <label>Investment Period</label>\n              <div className=\"input-group mb-3\">\n                <input type=\"number\" className=\"form-control\" value={period} onChange={e => setPeriod(e.target.value)} placeholder=\"Investment Period\" aria-label=\"Recipient's username\" aria-describedby=\"basic-addon2\" />\n                <div className=\"input-group-append\">\n                  <span className=\"input-group-text\" id=\"basic-addon2\">Years</span>\n                </div>\n              </div>\n            </div>\n            <div className=\"form-group\">\n              <label>Expected Annual Returns (%)</label>\n              <div className=\"input-group mb-3\">\n                <input type=\"number\" value={rateOfReturn} onChange={e => setRateOfReturn(e.target.value)} className=\"form-control\" placeholder=\"Expected Annual Returns (%)\" aria-label=\"Recipient's username\" aria-describedby=\"basic-addon2\" />\n                <div className=\"input-group-append\">\n                  <span className=\"input-group-text\" id=\"basic-addon2\">%</span>\n                </div>\n              </div>\n            </div>\n            <div className=\"form-group\">\n              <button className=\"btn btn-block btn-light btn-outline\" onClick={(e) =>{e.preventDefault(); calculate()}}>Calculate</button>\n            </div>\n          </form>\n        </div>\n        <div className=\"col-md-8\">\n          { data && <Breakup data={data} meta={meta}/> }\n        </div>\n      </div>\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}