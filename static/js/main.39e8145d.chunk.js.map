{"version":3,"sources":["components/Header.js","helpers/helpers.js","components/sip-calculator/Breakup.js","components/sip-calculator/InvestedVsGainChart.js","components/sip-calculator/DataOverview.js","components/common/Input.js","components/sip-calculator/SipCalculator.js","hooks/useFinInput.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","to","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","href","numberFormat","value","Math","round","displayType","thousandsGroupStyle","thousandSeparator","prefix","Breakup","props","data","useState","showTable","setShowTable","length","onClick","state","map","rec","i","year","month","initialBalance","investment","interest","balanceAtEndOfMonth","InvestedVsGainChart","meta","investmentAmount","interestAmount","width","height","chartType","loader","options","title","is3D","titleTextStyle","fontSize","rootProps","DataOverview","finalBalance","Input","name","max","autoComplete","finance","Finance","SipCalculator","initialValues","values","setValues","e","target","parseInt","useFinInput","sipAmount","rateOfReturn","period","handleChange","setMeta","setData","style","margin","paddingTop","onChange","placeholder","preventDefault","transactions","mon","totalAmountThisMonth","thisMonthInterest","CI","push","totalInterest","invested","calculate","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.39e8145d.chunk.js","sourcesContent":["import React from 'react'\nimport {Link} from 'react-router-dom'\n\nexport default function Header() {\n    return (\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n            <div className=\"container\">\n                <Link className=\"navbar-brand\" to=\"/\">Tools</Link>\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n                    <ul className=\"navbar-nav\">\n                        <Link to=\"/sip-calculator\" className=\"nav-link\">SIP Calculator</Link>\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link\" href=\"http://71anshuman.com\">Dev</a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n    )\n}\n","import NumberFormat from 'react-number-format';\n\nexport const numberFormat = (value) => {\n    return <NumberFormat value={Math.round(value, 2)} displayType={'text'} thousandsGroupStyle=\"lakh\" thousandSeparator={true} prefix=\"&#8377;\" />\n};\n\nexport const singleline = (multiLineString, noSpaces) => {\n    var delimiter = noSpaces ? '' : ' ';\n    return multiLineString.replace(/\\s\\s+/g, delimiter).trim();\n};\n","import React, { useState } from 'react'\nimport { numberFormat } from '../../helpers/helpers'\n\nexport default function Breakup(props) {\n    const { data } = props;\n    const [showTable, setShowTable] = useState(false);\n    return (\n        <div className=\"row\">\n            <div className=\"col-md-12\">\n                {data.length > 0 &&\n                    <button className=\"btn btn-light text-uppercase\" onClick={(() => setShowTable(state => !state))}> { showTable ? 'hide table' : 'Show Detail' }</button>\n                }\n                {showTable &&\n                    <table className=\"table table-striped table-hover table-sm scroll\">\n                        <caption className=\"text-uppercase text-muted text-center\">Investment and Wealth gain Breakup</caption>\n                        <thead>\n                        <tr>\n                            <th>Year</th>\n                            <th>Month</th>\n                            <th>Balance@Bigin</th>\n                            <th>Investment</th>\n                            <th>Interest</th>\n                            <th>Balance@End</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {\n                            data.map((rec, i) => {\n                            const {year, month, initialBalance, investment, interest, balanceAtEndOfMonth} = rec;\n                            return <tr key={i}>\n                                <td>{ year }</td>\n                                <td>{ month }</td>\n                                <td>{ numberFormat(initialBalance) }</td>\n                                <td>{ numberFormat(investment) }</td>\n                                <td>{ numberFormat(interest) }</td>\n                                <td>\n                                { numberFormat(balanceAtEndOfMonth) }\n                                </td>\n                            </tr>\n                            })\n                        }\n                        </tbody>\n                    </table>\n                }\n            </div>\n        </div>\n    )\n}\n","import { Chart } from \"react-google-charts\";\n\nexport default function InvestedVsGainChart(props) {\n    const { meta } = props;\n    const { investmentAmount, interestAmount } = meta;\n    return (\n        <div>\n            {investmentAmount !== 0 &&\n                <Chart\n                    width={'100%'}\n                    height={'400px'}\n                    chartType=\"PieChart\"\n                    loader={<div>Loading Chart</div>}\n                    data={[\n                        ['Amount', 'INR'],\n                        ['Invested', investmentAmount],\n                        ['Gain', interestAmount],\n                    ]}\n                    options={\n                        {\n                            title: 'Gain VS Invested',\n                            is3D: true,\n                            titleTextStyle: {\n                                fontSize: '24px',\n                            }\n                        }\n                    }\n                    rootProps={{ 'data-testid': '2' }}\n                />\n            }\n        </div>\n    )\n}\n","import React from 'react'\nimport { numberFormat } from '../../helpers/helpers'\n\nexport default function DataOverview({meta}) {\n    const { investmentAmount, interestAmount, finalBalance } = meta;\n    return (\n        <div className=\"col-md-12\">\n            <div className=\"jumbotron jumbotron-fluid bg-white border-bottom border-grey\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-4\">\n                            <h4><i className=\"fa fa-bars\"></i>\n                                { numberFormat(investmentAmount) }<br/>\n                                <small className=\"text-muted\">INVESTED</small>\n                            </h4>\n                        </div>\n                        <div className=\"col-md-4\">\n                            <h4>\n                                { numberFormat(interestAmount) }<br/>\n                                <small className=\"text-muted\">GAIN</small>\n                            </h4>\n                        </div>\n                        <div className=\"col-md-4\">\n                        <h4>\n                            { numberFormat(finalBalance) }<br/>\n                            <small className=\"text-muted text-uppercase\">maturity value</small>\n                        </h4>\n                    </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n","export default function Input(props) {\n    const { name } = props;\n    return (\n        <input max=\"100\" autoComplete=\"off\" name={name} className=\"form-control\" type=\"number\" {...props}/>\n    )\n}\n","import React, {useState} from 'react'\n\nimport { Finance } from 'financejs';\nimport Breakup from './Breakup';\nimport InvestedVsGainChart from './InvestedVsGainChart';\nimport DataOverview from './DataOverview';\nimport { useFinInput } from '../../hooks/useFinInput';\nimport Input from '../common/Input';\n\nlet finance = new Finance();\n\nexport default function SipCalculator() {\n    const [{sipAmount, period, rateOfReturn}, handleChange] = useFinInput(\n        {\n          sipAmount: '',\n          rateOfReturn: '',\n          period: '',\n        }\n    );\n    \n    const [meta, setMeta] = useState({investmentAmount: 0, interestAmount: 0, finalBalance: 0});\n    const [data, setData] = useState([]);\n    \n    function calculate() {\n        let investmentAmount = 0;\n        let interest = 0;\n        let balanceAtEndOfMonth = 0;\n        let transactions = [];\n        let year = 1;\n        let month;\n        for (let i = 1; i <= period * 12; i++) {\n          let mon = parseInt(i % 12);\n          month = mon === 0 ? 12 : mon;\n          const totalAmountThisMonth = investmentAmount + sipAmount;\n          balanceAtEndOfMonth = totalAmountThisMonth * (1 + (rateOfReturn/100) / 12);\n          const thisMonthInterest = Math.round(finance.CI(rateOfReturn/12, 1, totalAmountThisMonth, 1) - totalAmountThisMonth);\n          interest += thisMonthInterest;\n    \n          transactions.push({\n            year: year,\n            month: month,\n            initialBalance: Math.round(investmentAmount),\n            investment: sipAmount,\n            interest: thisMonthInterest,\n            balanceAtEndOfMonth: Math.round(balanceAtEndOfMonth),\n            totalInterest: interest\n          });\n    \n          investmentAmount = balanceAtEndOfMonth;\n          if (mon === 0) {\n            year++;\n          }\n        }\n    \n        setData(transactions);\n        const invested = period * 12 * sipAmount;\n        setMeta({\n          investmentAmount: invested ?? 0,\n          period,\n          rateOfReturn,\n          finalBalance: investmentAmount,\n          interestAmount: parseInt(investmentAmount - invested),\n        });\n    \n    }\n\n    return (\n        <>\n        <div className=\"jumbotron jumbotron-fluid\">\n            <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-md-8\">\n                <h1 className=\"display-6\">SIP Calculator</h1>\n                <p className=\"lead\">SIP is the best way to accumulate long term wealth.</p>\n                <div className=\"row\">\n                    <DataOverview meta={meta} />\n                </div>\n                </div>\n                <div className=\"col-md-4\" style={{margin: 'auto 0', paddingTop: '5rem'}}>\n                <form>\n                    <div className=\"form-group\">\n                    {/* <label>How much do you want to invest monthly?</label> */}\n                    <Input name='sipAmount' value={sipAmount} onChange={handleChange} placeholder=\"Expected Annual Returns (%)\" />\n                    </div>\n                    <div className=\"form-group\">\n                    {/* <label>Investment Period</label> */}\n                    <div className=\"input-group mb-3\">\n                        <Input name='period' value={period} onChange={handleChange} placeholder=\"Investment Period\" />\n                        <div className=\"input-group-append\">\n                        <span className=\"input-group-text\" id=\"basic-addon2\">Years</span>\n                        </div>\n                    </div>\n                    </div>\n                    <div className=\"form-group\">\n                    {/* <label>Expected Annual Returns (%)</label> */}\n                    <div className=\"input-group mb-3\">\n                        <Input name='rateOfReturn' value={rateOfReturn} onChange={handleChange} placeholder=\"Expected Annual Returns (%)\" />\n                        <div className=\"input-group-append\">\n                        <span className=\"input-group-text\" id=\"basic-addon2\">%</span>\n                        </div>\n                    </div>\n                    </div>\n                    <div className=\"form-group\">\n                    <button className=\"btn btn-block btn-light btn-outline\" onClick={(e) =>{e.preventDefault(); calculate()}}>Calculate</button>\n                    </div>\n                </form>\n                </div>\n            </div>\n            </div>\n        </div>\n        <div className=\"row\">\n            <div className=\"col-md-4\">\n            <InvestedVsGainChart  meta={meta}/>\n            </div>\n            <div className=\"col-md-8\">\n            { data && <Breakup data={data} /> }\n            </div>\n        </div>\n        </>\n    )\n}\n","import { useState } from 'react';\n\nexport const useFinInput = (initialValues) => {\n    const [values, setValues] = useState(initialValues);\n\n    return [values, e => {\n        setValues({\n            ...values,\n            [e.target.name]: parseInt(e.target.value)\n        })\n    }]\n}","import Header from './components/Header';\nimport {Switch, Route} from 'react-router-dom';\nimport SipCalculator from './components/sip-calculator/SipCalculator'\n\nfunction App() {\n  return (\n    <>\n    <Header />\n    <div className=\"container-fluid\">\n    <Switch>\n      <Route exact path=\"/\">\n        <SipCalculator />\n      </Route>\n      <Route path=\"/sip-calculator\">\n        <SipCalculator />\n      </Route>\n    </Switch>\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {HashRouter} from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}